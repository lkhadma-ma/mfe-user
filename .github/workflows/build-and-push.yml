name: Build Angular Image and Push to GHCR + Update Config Repo

on:
  push:
    branches:
      - main

jobs:
  build_and_push:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write

    steps:
      - name: Checkout Angular source code
        uses: actions/checkout@v4

      # ---------------------------------------------
      # READ CURRENT VERSION FROM CONFIG REPO
      # ---------------------------------------------
      - name: Checkout deploy/config repo
        uses: actions/checkout@v4
        with:
          repository: lkhadma-ma/mfe-user-deploy
          ref: main
          token: ${{ secrets.PAT_GITHUB_TOKEN }}
          path: deploy-repo

      - name: Determine next semantic version
        id: semver
        run: |
            CONFIG_FILE="deploy-repo/image.yml"
        
            # Default version if none exists
            if [ ! -f "$CONFIG_FILE" ]; then
              LAST_VERSION="v1.0.0"
            else
              LAST_VERSION=$(grep 'version:' "$CONFIG_FILE" | awk '{print $2}' | tr -d '"')
              [ -z "$LAST_VERSION" ] && LAST_VERSION="v1.0.0"
            fi
        
            echo "Last version: $LAST_VERSION"
        
            # Remove leading 'v'
            VERSION_NUM=${LAST_VERSION#v}
        
            # Split into MAJOR.MINOR.PATCH
            IFS='.' read -r MAJOR MINOR PATCH <<< "$VERSION_NUM"
        
            # Determine bump type (default: patch)
            # Optional: parse commit message or input to decide major/minor/patch
            BUMP_TYPE="${{ github.event.inputs.bump || 'patch' }}"  
        
            case $BUMP_TYPE in
              major)
                MAJOR=$((MAJOR + 1))
                MINOR=0
                PATCH=0
                ;;
              minor)
                MINOR=$((MINOR + 1))
                PATCH=0
                ;;
              patch)
                PATCH=$((PATCH + 1))
                ;;
              *)
                echo "Unknown bump type: $BUMP_TYPE"
                exit 1
                ;;
            esac
        
            # Build new version string
            NEW_VERSION="v${MAJOR}.${MINOR}.${PATCH}"
            echo "New version: $NEW_VERSION"
        
            # Export to GitHub Actions environment
            echo "VERSION=$NEW_VERSION" >> $GITHUB_ENV
        
      # ---------------------------------------------
      # BUILD & PUSH DOCKER IMAGE
      # ---------------------------------------------
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push Docker image
        env:
          IMAGE_NAME: ghcr.io/${{ github.repository }}
        run: |
          IMAGE=$IMAGE_NAME:${{ env.VERSION }}
          LATEST=$IMAGE_NAME:latest

          echo "Building image $IMAGE"

          export DOCKER_BUILDKIT=1
          docker build -t $IMAGE -t $LATEST -f Dockerfile.build .
          docker push $IMAGE
          docker push $LATEST

      - name: Create and push new tag in source repo
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

          git tag ${{ env.VERSION }}
          git push origin ${{ env.VERSION }}

      # ---------------------------------------------
      # UPDATE CONFIG REPO WITH NEW IMAGE VERSION
      # ---------------------------------------------
      - name: Update image.yml with new version
        run: |
          cat > deploy-repo/image.yml <<EOF
          app:
            version: "${{ env.VERSION }}"
            name: angular-app
            registry: ghcr.io/${{ github.repository }}
          EOF

      - name: Commit and push updated image.yml
        working-directory: deploy-repo
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

          git add image.yml
          git commit -m "chore: update image version to ${{ env.VERSION }}"
          git push origin master

      - name: Tag deploy repo with version
        working-directory: deploy-repo
        run: |
          git tag "${{ env.VERSION }}"
          git push origin "${{ env.VERSION }}"
